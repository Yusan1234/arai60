python

```
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        
        if beginWord == endWord: return 0
        if endWord not in wordList: return 0
        
        neighbors = defaultdict(list)
        
        l = len(beginWord)

        for word in wordList:
            for i in range(l):
                new_state_of_word = word[:i] + "*" + word[i+1:]
                neighbors[new_state_of_word].append(word)
        
                
        que = deque()
        que.append(beginWord)
        seen = set()
        seen.add(beginWord)
        level = 0
        while que:
            n = len(que)
            for _ in range(n):
                current = que.popleft()
                if current == endWord:
                    return level + 1
                for i in range(l):
                    new_state_of_word = current[:i] + "*" + current[i + 1:]
                    for next_word in neighbors[new_state_of_word]:
                        if next_word not in seen:
                            seen.add(next_word)
                            que.append(next_word)
            level += 1
        return 0


```
